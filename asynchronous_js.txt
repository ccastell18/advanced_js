How Javascript works

What is a program?
-allocate memory (memory heap)
-parse and execute (call stack)

syncronous- each bit of code must be finished before moving to the nex bit of code.

stack overflow- when the call stack gets too many functions to run.

-Javascript runtime environment has Javascript engine, web apis(Dom, Timeout), Callback Queue, and Event Loop.
-bits of code are placed on call stack. It is then processed.
- if it is a web api, it will place it on the callback Queue.
-the event loop is constantly checking to see if the call stack is empty. If so, it will pop the callback queue onto the call stack and then processed. 

Promises

-A promise is an object that may produce a single value some time in the future.
-Either a resolved value or a reason that it is not resolved(rejected)
-can either be fullfilled, pending, or rejected

const promise = new Promise((resolve, reject) =>{
  if(true){
    resolve('stuff worked');
  }else{
    reject('error, it broke');
  }
})

//Throwing an error and using catch
promise
.then(result => { return result + !
})
.then(result2 =>{
  throw Error
  console.log(result2)
)
.catch(() => console.log('error'))

promise
.then(result => return result + '!')
.then(result2 => return result2 + '?')
.catch(() => console.log('error'))
.then(result3 => {
  console.log(result3 + '!')
})
would result in stuff worked (in promise above)
 'Stuff worked !?!' because there were no errors, the catch was not implemented.

Promise All

 const promise2 = new Promise((resolve, reject) => {
   setTimeout(resolve, 100, 'Pookie')
 })
 const promise3 = new Promise((resolve, reject) => {
   setTimeout(resolve, 1000, 'HIIIII')
 })
 const promise4 = new Promise((resolve, reject) => {
   setTimeout(resolve, 3000, 'Are you looking for me?')
 })
Promise.all([promise, promise2, promise3, promise4])
.then(values => {
  console.log(values)
}) 
-It would wait three secondes (promise4) before logging all values because Promise.all waits until all promises have been resolved.
-If run again with just variables then Promise.all, it would be automatic because the promises are being resolved in the background.

Real World application

const urls = [
    'https://jsonplaceholder.typicode.com/users',
    'https://jsonplaceholder.typicode.com/posts',
    'https://jsonplaceholder.typicode.com/albums'
]

Promise.all(urls.map(url =>{
  return fetch(url).then(resp => resp.json())
})).then(results => {
  console.log(results[0])
  console.log(results[1])
  console.log(results[2])
}).catch(() => console.log('error'))
 