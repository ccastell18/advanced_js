
//regular
const promisify = (item, delay) =>
  newPromise((resolve) =>
    setTimeout(() =>
    resolve(item), delay));

const a = () => promisify('a', 100);
const b = () => promisify('b', 5000);
const c = () => promisify('c', 3000);

//parallel
async function parallel(){
  const promises = [a(), b(), c()];
  const [output1, output2, output3] = await Promise.all(promises);
  return `parallel is done: ${output1} ${output2} ${output3}`
}
-returns all at the same time (5 second mark of b).

//Race
async function race(){
  const promises = [a(), b(), c()];
  const output1 = await Promise.race(promises);
  return `race is done: ${output1}`
}
-only returns the data that reaches it first. (a() is 100 ms).


//sequence
async function sequence(){
  const output1 = await a();
  const output2 = await b();
  const output3 = await c();
  return `sequence is done ${output1} ${output2} ${output3}`
}
-since await is in front of each function, it pauses for each function to be done before moving to the next one.  Slowest