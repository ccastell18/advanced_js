Added to ES6

Let and Const
using var can change variables within brackets. 
let - the new var. cannot change variables
const - can never be reassigned. If an object is a const, you can change properties within. 

Destructuring
 const obj = {
    player: 'bobby',
    experience: 100, 
    wizardlLevel: false
 }

 const player = obj.player
 const experience = obj.experience
 const wizardlLevel = obj.wizardlLevel

 //destructured
 const {player, experience} = obj;
//access to properties with less code.

Object properties
if property and value are the same, just need the property name

const a = "simon"
const b = 'true'
const c = {};
const obj = {a, b, c} 

instead of 
const obj ={
  a:a,
  b:b,
  c:c
}

Template Strings
// using back ticks and then using ${variable} around your variable, no more using 
const name = 'sam';
const greeting = "hello " + name + ".";
const newGreeting = `hello ${name}.`;

Default Arguments
function greet(name="Sam");
newGreeting()// now shows
"hello Sam."
- if parameters are not given in the function, it will fill in the arguments with default arguments.

Symbol
let sym1 = Symbol();
let sym2 = Symbol('foo');
let sym3 = Symbol('foo');

sym2 === sym3;
false

Arrow functions
const a = (a,b) => a + b
